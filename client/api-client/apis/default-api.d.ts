/**
 * Vault API
 * Vault API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AccessDTO } from '../models';
import { Account } from '../models';
import { CreateRuleDTO } from '../models';
import { CreateUserDTO } from '../models';
import { ExchangeTokenDTO } from '../models';
import { LinkTokenDTO } from '../models';
import { LoginRequestDTO } from '../models';
import { Rule } from '../models';
import { SummaryStatsDTO } from '../models';
import { SyncStatusDTO } from '../models';
import { SystemStatusDTO } from '../models';
import { Transaction } from '../models';
import { UpdateRuleDTO } from '../models';
import { User } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (
  configuration?: Configuration,
) => {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerDelete: (
    id: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerSelectAll: (
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerSelectById: (
    id: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {LoginRequestDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  authControllerLogin: (
    body: LoginRequestDTO,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  authControllerMe: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  oauthControllerCreateLinkToken: (
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {ExchangeTokenDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  oauthControllerExchangeToken: (
    body: ExchangeTokenDTO,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {CreateRuleDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerCreate: (
    body: CreateRuleDTO,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerDelete: (
    id: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerSelectAll: (
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerSelectById: (
    id: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {UpdateRuleDTO} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerUpdate: (
    body: UpdateRuleDTO,
    id: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  statsControllerSummary: (
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  syncControllerStart: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  syncControllerStatus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
  /**
   *
   * @param {CreateUserDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  systemControllerInitialize: (
    body: CreateUserDTO,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  systemControllerStatus: (
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  tasksControllerStartSync: (
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {number} limit
   * @param {number} offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  transactionsControllerSelectAll: (
    limit: number,
    offset: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  transactionsControllerSelectById: (
    id: number,
    options?: AxiosRequestConfig,
  ) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerDelete(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerSelectAll(
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<Array<Account>>>
  >;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<Account>>
  >;
  /**
   *
   * @param {LoginRequestDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  authControllerLogin(
    body: LoginRequestDTO,
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<AccessDTO>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  authControllerMe(
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  oauthControllerCreateLinkToken(
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<LinkTokenDTO>>
  >;
  /**
   *
   * @param {ExchangeTokenDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  oauthControllerExchangeToken(
    body: ExchangeTokenDTO,
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
  >;
  /**
   *
   * @param {CreateRuleDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerCreate(
    body: CreateRuleDTO,
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rule>>
  >;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerDelete(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerSelectAll(
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<Array<Rule>>>
  >;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rule>>
  >;
  /**
   *
   * @param {UpdateRuleDTO} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerUpdate(
    body: UpdateRuleDTO,
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rule>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  statsControllerSummary(
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<SummaryStatsDTO>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  syncControllerStart(
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  syncControllerStatus(
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<SyncStatusDTO>>
  >;
  /**
   *
   * @param {CreateUserDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  systemControllerInitialize(
    body: CreateUserDTO,
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<AccessDTO>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  systemControllerStatus(
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<SystemStatusDTO>>
  >;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  tasksControllerStartSync(
    options?: AxiosRequestConfig,
  ): Promise<
    (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
  >;
  /**
   *
   * @param {number} limit
   * @param {number} offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  transactionsControllerSelectAll(
    limit: number,
    offset: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<Array<Transaction>>>
  >;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  transactionsControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<
    (
      axios?: AxiosInstance,
      basePath?: string,
    ) => Promise<AxiosResponse<Transaction>>
  >;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) => {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerDelete(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerSelectAll(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Account>>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  accountsControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Account>>;
  /**
   *
   * @param {LoginRequestDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  authControllerLogin(
    body: LoginRequestDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<AccessDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  authControllerMe(options?: AxiosRequestConfig): Promise<AxiosResponse<User>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  oauthControllerCreateLinkToken(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<LinkTokenDTO>>;
  /**
   *
   * @param {ExchangeTokenDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  oauthControllerExchangeToken(
    body: ExchangeTokenDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {CreateRuleDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerCreate(
    body: CreateRuleDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Rule>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerDelete(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerSelectAll(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Rule>>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Rule>>;
  /**
   *
   * @param {UpdateRuleDTO} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  rulesControllerUpdate(
    body: UpdateRuleDTO,
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Rule>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  statsControllerSummary(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SummaryStatsDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  syncControllerStart(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  syncControllerStatus(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SyncStatusDTO>>;
  /**
   *
   * @param {CreateUserDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  systemControllerInitialize(
    body: CreateUserDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<AccessDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  systemControllerStatus(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SystemStatusDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  tasksControllerStartSync(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {number} limit
   * @param {number} offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  transactionsControllerSelectAll(
    limit: number,
    offset: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Transaction>>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  transactionsControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Transaction>>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  accountsControllerDelete(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  accountsControllerSelectAll(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Account>>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  accountsControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Account>>;
  /**
   *
   * @param {LoginRequestDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  authControllerLogin(
    body: LoginRequestDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<AccessDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  authControllerMe(options?: AxiosRequestConfig): Promise<AxiosResponse<User>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  oauthControllerCreateLinkToken(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<LinkTokenDTO>>;
  /**
   *
   * @param {ExchangeTokenDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  oauthControllerExchangeToken(
    body: ExchangeTokenDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {CreateRuleDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  rulesControllerCreate(
    body: CreateRuleDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Rule>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  rulesControllerDelete(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  rulesControllerSelectAll(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Rule>>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  rulesControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Rule>>;
  /**
   *
   * @param {UpdateRuleDTO} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  rulesControllerUpdate(
    body: UpdateRuleDTO,
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Rule>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  statsControllerSummary(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SummaryStatsDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  syncControllerStart(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  syncControllerStatus(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SyncStatusDTO>>;
  /**
   *
   * @param {CreateUserDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  systemControllerInitialize(
    body: CreateUserDTO,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<AccessDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  systemControllerStatus(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SystemStatusDTO>>;
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  tasksControllerStartSync(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>>;
  /**
   *
   * @param {number} limit
   * @param {number} offset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  transactionsControllerSelectAll(
    limit: number,
    offset: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Transaction>>>;
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  transactionsControllerSelectById(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Transaction>>;
}
